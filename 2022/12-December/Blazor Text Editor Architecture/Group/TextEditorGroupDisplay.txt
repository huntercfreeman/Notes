// TextEditorGroupDisplay : Blazor Component

@razorMarkup
{
    <div class="bte_text-editor-group">

    </div>
}

@cSharpCode
{
    INHERITS: ComponentBase, IDisposable

    [Inject]
    private IState<TextEditorGroupCollection?> TextEditorGroupWrap { get; set; } = null!;
    [Inject]
    private IDispatcher Dispatcher { get; set; } = null!;

    /// <summary>
    /// If the provided <see cref="TextEditorGroupKey"/> is registered using the
    /// <see cref="ITextEditorService"/>. Then this component will automatically update
    /// when the corresponding <see cref="TextEditorGroup"/> is replaced.
    /// <br/><br/>
    /// A <see cref="TextEditorGroupKey"/> which is NOT registered using the
    /// <see cref="ITextEditorService"/> can be passed in. Then if the <see cref="TextEditorGroupKey"/>
    /// ever gets registered then this Blazor Component will update accordingly.
    /// </summary>
    [Parameter, EditorRequired]
    public TextEditorGroupKey TextEditorGroupKey { get; set; } = null!;

    private TextEditorGroupKey _previousTextEditorGroupKey;
    private TextEditorRenderStateKey _previousTextEditorRenderStateKey;

    protected override void OnInitialized()
    {
        TextEditorGroupWrap.StateChanged += OnTextEditorGroupWrapStateChanged;

        base.OnInitialized();
    }

    protected override bool ShouldRender()
    {
        TextEditorGroupWrap.StateChanged += OnTextEditorGroupWrapStateChanged;

        base.OnInitialized();
    }

    private void OnTextEditorGroupWrapStateChanged(object sender, EventArgs e)
    {
        _ = textEditorGroupCollection.TryGetValue(
                TextEditorGroupKey, 
                out var textEditorGroup);

        if (textEditorGroup.TextEditorRenderStateKey != _previousTextEditorRenderStateKey)
        {
            _previousTextEditorRenderStateKey = textEditorGroup.TextEditorRenderStateKey;
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        TextEditorGroupWrap.StateChanged -= OnTextEditorGroupWrapStateChanged;
    }
}