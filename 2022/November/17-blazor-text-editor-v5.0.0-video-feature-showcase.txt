DATE: 2022-11-17
----------------

# Goal
{

[]Video for every feature showcase.

[]ITextEditorService.cs
{
    // Properties
    []LocalStorageGlobalTextEditorOptionsKey // static string { get; }
    []TextEditorStates // TextEditorStates  { get; }
    []GlobalThemeCssClassString // string { get; }
    []GlobalThemeValue // Theme? { get; }
    []GlobalFontSizeInPixelsStyling // string { get; }
    []GlobalFontSizeInPixelsValue // int { get; }
    []GlobalShowNewlines // bool { get; }
    []GlobalShowWhitespace // bool { get; }

    // Events
    []OnTextEditorStatesChanged // event Action?

    // Register Methods
    []RegisterCustomTextEditor // public void (TextEditorBase textEditorBase);
    []RegisterCSharpTextEditor // public void (
        TextEditorKey textEditorKey,
        string initialContent,
        ITextEditorKeymap? textEditorKeymapOverride = null);
    []RegisterHtmlTextEditor // public void (
        TextEditorKey textEditorKey,
        string initialContent,
        ITextEditorKeymap? textEditorKeymapOverride = null);
    []RegisterRazorTextEditor // public void (
        TextEditorKey textEditorKey,
        string initialContent,
        ITextEditorKeymap? textEditorKeymapOverride = null);
    []RegisterJavaScriptTextEditor // public void (
        TextEditorKey textEditorKey,
        string initialContent,
        ITextEditorKeymap? textEditorKeymapOverride = null);
    []RegisterTypeScriptTextEditor // public void (
        TextEditorKey textEditorKey,
        string initialContent,
        ITextEditorKeymap? textEditorKeymapOverride = null);
    []RegisterPlainTextEditor // public void (
        TextEditorKey textEditorKey,
        string initialContent,
        ITextEditorKeymap? textEditorKeymapOverride = null);

    // Edit methods
    []InsertText // void (InsertTextTextEditorBaseAction insertTextTextEditorBaseAction);
    []HandleKeyboardEvent // void (KeyboardEventTextEditorBaseAction keyboardEventTextEditorBaseAction);
    []DeleteTextByMotion // void (DeleteTextByMotionTextEditorBaseAction deleteTextByMotionTextEditorBaseAction);
    []DeleteTextByRange // void (DeleteTextByRangeTextEditorBaseAction deleteTextByRangeTextEditorBaseAction);
    []RedoEdit // void (TextEditorKey textEditorKey);
    []UndoEdit // void (TextEditorKey textEditorKey);
    
    // Settings methods
    []SetFontSize // void (int fontSizeInPixels);
    []SetTheme // void (Theme theme);
    []SetShowWhitespace // void (bool showWhitespace);
    []SetShowNewlines // void (bool showNewlines);
    []SetUsingRowEndingKind // void (TextEditorKey textEditorKey, RowEndingKind rowEndingKind);
    []ShowSettingsDialog // void (bool isResizable = false);
    
    // Force rerender 
    // 
    // Avoid using this.
    // 
    // It is for specific reasons
    // like cross component communication for Events
    // not directly related to the TextEditorBase.cs changing
    public void ForceRerender(TextEditorKey textEditorKey);
    
    // Local storage methods
    public Task SetTextEditorOptionsFromLocalStorageAsync();
    public void WriteGlobalTextEditorOptionsToLocalStorage();

    // Dispose methods
    []DisposeTextEditor // void (TextEditorKey textEditorKey);
}

[]ITextEditorServiceOptions.cs
{
    // For those who are using Fluxor
    // so Fluxor isn't initialized twice.
    //
    // Add typeof(ITextEditorServiceOptions).Assembly
    // when you initialize Fluxor yourself.
    //
    // You are to render <Fluxor.Blazor.Web.StoreInitializer/>
    //
    // The <BlazorTextEditor.RazorLib.BlazorTextEditorInitializer/> 
    // still is required
    public bool InitializeFluxor { get; }
    public Theme InitialTheme { get; set; }
}

[]TextEditorServiceOptions.cs
{
    public Func<IServiceProvider, IClipboardProvider>? ClipboardProviderFactory { get; set; }
    public Func<IServiceProvider, IStorageProvider>? StorageProviderFactory { get; set; }
    public Func<IServiceProvider, IAutocompleteService>? AutocompleteServiceFactory { get; set; }
    public Func<IServiceProvider, IAutocompleteIndexer>? AutocompleteIndexerFactory { get; set; }
}

[]BlazorTextEditorInitializer.razor.cs
{
    // Initial theme
    //
    // <Fluxor.Blazor.Web.StoreInitializer/>
    //
    // <DialogInitializer/>
    // <NotificationInitializer/>
    // <DragDisplay/>
}

[]TextEditorView.razor
{
    Internally this Blazor component is used to render all of the
    Blazor components which render data from a TextEditorBase.

    This component will automatically rerender when the TextEditorBase with
    the given Blazor parameter of 'TextEditorKey' changes.

    This component has no user interface and is instead used as a base class.

    This component is public and anyone can make use of it.
}

[]TextEditorDisplay.razor
{
    TextEditorDisplay.razor will be referred to in first person by 'I'

    As well the file will be explained by means of pseudo code and English
    sentences mixed together.

    I require a Blazor parameter named 'TextEditorKey' so I can
    find the corresponding 'TextEditorBase' that has been registered
    with the 'ITextEditorService' and subscribe to that 'TextEditorBase'
    changing.

    The first step I take when rendering is to display an invisible div
    in my razor markup. I add an arbitrary count of characters to this
    invisible div. I now can measure the width of a character given the current
    font-size and font-family by measure the width of the invisible div
    and dividing that by the arbitrary count of characters that were
    rendered. The height of a row equates to the height of the invisible div.

    An issue arises however, must not render the entirety of the text content.
    I should only render text content that is visible as to ensure
    large text files do not cause slow performance. Therefore horizontal
    and vertical virtualization is performed to only render the text
    that is visible.

    How do I perform the virtualization? I use JavaScript to measure the
    width and the height of the visible portion of the TextEditorDisplay
    which is currently empty other than the invisible div previously mentioned.

    Using the height of the TextEditorDisplay and the height of a row I can
    then find how many lines of text can fit in the viewable area. I need to
    check where the scrollTop is of the scrollbar as that will offset
    where my startingIndex is for rendering out the lines.

    Foreach line being rendered I as well check how long that line is
    in terms of character length. This is done by the TextEditorBase
    maintaining a private List for the position index of the ending
    of every row. Position index is to refer to the position relative
    to the document in its entirety. Otherwise you will see a tuple
    (int rowIndex, int columnIndex) which has the same end value
    as a positionIndex once the rowIndex and columnIndex are added
    based off the positionIndex for the start of the row and the column index.

    In addition to checking how many characters fit horizontally in the horizontal
    viewable area. I need to check the scrollLeft position in order to
    offset the statingIndex I being rendering out the characters for.
}

[]Virtualization/
{
    
}

[]TreeView/
{

}

[]TextEditor/
{

}

[]Store/
{
    []DialogCase/
    {
        
    }

    []DragCase/
    {

    }

    []DropdownCase/
    {

    }

    []IconCase/
    {

    }

    []NotificationCase/
    {

    }

    []StorageCase/
    {

    }

    []TextEditorCase/
    {

    }

    []ThemeCase/
    {

    }

    []TreeViewCase/
    {

    }
}

[]Row/
{

}

[]Resize/
{

}

[]OutOfBoundsClick/
{

}

[]Notifications/
{

}

[]Menu/
{

}

[]Lexing/
{

}

[]Keymap/
{

}

[]Keyboard/
{

}

[]JavaScriptObjects/
{

}

[]Icons/
{

}

[]Codicon/
{

}

[]HelperComponents/
{

}

[]Editing/
{

}

[]Dropdown/
{

}

[]Drag/
{

}

[]Dimensions/
{

}

[]Dialog/
{

}

[]Decoration/
{

}

[]CustomEvents/
{

}

[]Cursor/
{

}

[]Commands/
{

}

[]Clipboard/
{

}

[]Character/
{

}

[]Autocomplete/
{

}

[]Analysis/
{
    []CSharp/
    {

    }

    []Html/
    {

    }

    []JavaScript/
    {

    }

    []Razor/
    {

    }

    []TypeScript/
    {

    }
}

[]wwwroot/
{
    []Themes/
    {

    }
}

}

# Plan
{
}

# Youtube thumbnail ideas
{
}

# Youtube title ideas
{
}

# Youtube video description
{
Email Me:
    -hunterfreemandev@gmail.com

Text Editor from scratch with Blazor and C# youtube playlist:
    -https://youtube.com/playlist?list=PLG4PTDe2qc0i0COivTxn_rjSN96Xq-_K1

GitHub repos
    -BlazorStudio: https://github.com/huntercfreeman/BlazorStudio
    -Blazor.Text.Editor: https://github.com/huntercfreeman/Blazor.Text.Editor
    -Blazor.Text.Editor-Template: https://github.com/huntercfreeman/Blazor.Text.Editor-Template
    -Blazor.Text.Editor.Analysis: https://github.com/huntercfreeman/Blazor.Text.Editor.Analysis
    -BlazorTreeView: https://github.com/huntercfreeman/BlazorTreeView

NuGet Packages
    -Blazor.Text.Editor: https://www.nuget.org/packages/Blazor.Text.Editor/
    -Blazor.Text.Editor.Lexer.HTML: https://www.nuget.org/packages/Blazor.Text.Editor.Lexer.HTML
    -Blazor.Text.Editor.Lexer.CSharp: https://www.nuget.org/packages/Blazor.Text.Editor.Lexer.CSharp
}

# Before this video specifically checklist
{
[]See in general checklist
}

# Checklist before recording a video in general
{
[]Font-size
    []Rider
        []Appearance
            []Font-Family: Segoe UI;
		    []Font-Size: 24px;
        []Editor
            []Font-Family: Consolas;
		    []Font-Size: 30px;
		    []Line Height: 1.1;
    []Operating system
        []Windows
            []Settings > Accessibility > Text size
                []Text size slider
                    []150%
    []Web Browser
    []BlazorStudio itself
    []Visual Studio Code
}

# Web Links
{
}