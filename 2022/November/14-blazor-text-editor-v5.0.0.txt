DATE: 2022-11-14
----------------

# Goal
{

# TODO ----------------------------------------------------------------------------
[]Ensure '13-blazor-text-editor-v5.0.0.txt' has its goals met
    []Copy TODO items from '13-blazor-text-editor-v5.0.0.txt' to this file?
[]Check the file size of the NugetPackage when finished.
    []It should be as lightweight as it can be.
[]The getContextMenuFixedPositionRelativeToElement javascript needs to account
    for the scroll position horizontally and vertically.
[]TextEditorDisplay needs tabs by default
[]Ensure all unnecessary CSS is removed.
[]Ensure all of the css is namespaced: 'bte_...' is required
[]Ensure all CSS values are css variables
[]Consider doing what Microsoft.CodeAnalysis did with their nuget packages.
    []They have "Microsoft.CodeAnalysis" include all nuget packages in a single package.
        []The individual components are available as their own nuget packages as well.
[]Should the sizes be in em instead of rem?
[]Check every usage of Blazor EditorRequired on a Parameter if it is actually required.
    []The warnings otherwise are incredibly obnoxious.
[]Look into how the BlazorTextEditor functions on mobile.
    []If the text editor cannot possibly work on mobile what is the course of action?
        []pseudo code: if (mobile) <textarea /> else <TextEditorDisplay />
[]Visual Indicator whether TextEditorDisplay has focus
[]Remember to remove EBI and EBS (edit block debug UI) from the footer
[]Undo and Redo EditBlocks need to track the cursor as well
    []There is an exception being thrown because an undo might
        remove content where the cursor is.
        []Yet not update the cursor to be within bounds of the text.
            []Thereby causing an exception the next time the cursor does something.
    []At the least position the cursor correctly after undo and redo
        []But preferrably track cursors at undos and redos.
[]Fix clicking directly on a tab key puts cursor wrong position.
[]ERROR: Index must be within the bounds of the List
    []TextEditorBase.PrivateMethods.cs:line 32
[]Make a Demo app
    []Project Structure
        []BlazorTextEditor.Demo.ServerSide
        []BlazorTextEditor.Demo.Wasm
        []BlazorTextEditor.Demo.ClassLib
        []BlazorTextEditor.Demo.RazorLib
        []BlazorTextEditor.Demo.Tests
    []WebAssembly authentication
        []Service container
            []AddOidcAuthentication()
                []Adds services required for the app to interact 
                    with the Identity Provider (IP)
                []OIDC
                    []oidc-client.js
                    []Acronymn
                        []Open
                        []I (of the ID)
                        []D (of the ID)
                        []Connect
                    []Extends the OAuth 2.0 authorization protocol
        []Tokens
            []Access tokens (defined in OAuth)
                []For API
            []ID tokens (defined in OpenID Connect)
                []For authentication
                []Must not be used to make 
                    requests to the resource server
            []OAuth Refresh Tokens
                []Get a new access token without the user's interaction
                []Must not allow the client to gain any access 
                    beyond the scope of the original grant
        []OAuth Scopes
            []limit an application's access to a user's account
            []OAuth spec allows the authorization server or user
                to modify the scopes granted to the application 
                compared to what is requested
                []Not many examples of services doing this in practice
        []Configuration
            []"Local"
                []"Authority"
                []"ClientId"
                [].... others depending on the app's IP (Identity Provider)
        []Wasm
            []Automatically configures default scopes for 
                []openid
                []profile                
            []Will not automatically configure the app to request an access
                token for a secure API
                []To add it manually configure AddOidcAuthentication()
                    []options.ProviderOptions.DefaultScopes.Add("{SCOPE URI}");
            [](wwwroot/index.html) page includes a script that defines the 
                AuthenticationService in JavaScript
                []AuthenticationService handles the low-level 
                    details of the OIDC protocol.
                []The app internally calls methods defined in the script to 
                    perform the authentication operations
            []CascadingAuthenticationState component exposes the 
                AuthenticationState to the rest of the app
            []AuthorizeRouteView component makes sure that the current user
                is authorized to access a given page or otherwise 
                renders the RedirectToLogin component.
            []RedirectToLogin component preserves the current URL that the 
                user is attempting to access so that they can be returned
                to that page if authentication is successful.
            []LoginDisplay component
                []For authenticated users
                    []Displays the current username
                    []Offers a button to log out of the app
                []For anonymous users, offers the option to log in
            []Authentication component
                []Manages performing the appropriate actions at each 
                    stage of authentication

# COMPLETED ----------------------------------------------------------------------------
[X]Allow the user to set the initial theme.
[X]BUG: Expand selection double click with no content in the TextEditor
    will crash. 
    [X]Index was out of range.
    [X]TextEditorBase.PublicMethods.cs:line 329
[X]BUG: Cut selection on content that starts with column index 0 will put cursor at column index -1
[X]Out of the box static settings dialog component
[X]Control + Backspace
[X]Control + Delete
[X]Update the Constants for punctuation they seem to be missing some.
[X]Fix height of header and footer
[X]Change light theme caret row color
[X]Fix GetColumnIndexOfCharacterWithDifferingKind() index out of range
[X]Fix double click expand selection -1 index out of range exception
[X]Default context menu
[X]Wire up all of the TextEditorHeader.razor Blazor component's buttons.
    [X]Undo
    [X]Redo
    [X]Cut
    [X]Copy
    [X]Paste
    [X]Save
    [X]Select All
    [X]Refresh
[X]Move over all Analysis code (the ILexers and IDecorationMappers) to BlazorTextEditor
    [X]Not enough analysis logic exists to warrent installing a separate nuget
        package it is mostly just an annoying step at this point in time.
[X]Move over some code from BlazorStudio to the BlazorTextEditor
    [X]CustomEvents
    [X]Dimensions
    [X]Dropdown
    [X]Menu
    [X]OutOfBoundsClick
    [X]Resize
    [X]Notifications
[X]I think the bug with EditBlocks is down to
    [X]When undo one writes the pending EditBlock which was at EditBlocks.Count
        in otherwords an invalid index to read (fine to insert though).
        [X]Redo will then put the user at a non pending block.
            [X]Yet this block will be the active one and
                something along these lines is the issue.
                [X]I had this realization and needed to writes
                    down my thoughts before I forgot -- am busy doing other things.
                [X]Need to be on a pending block if at EditBlocks.Count?
                [X]The pending block needs to be made when they redo all their undos.
    [X]Fixed the bug
        [X]It was due to maximum edit block count removing older history
            and not decrementing the edit block index.
[X]When cursor accesses out of bounds location return largest available RowIndex 
    and largest available ColumnIndex
[X]Virtualization move to separate files the many classes in one
[X]Move rerender logic to the reducer having a replaced value needing
    rendered. Instead of manually.
[X]Make TextEditorView to be a base class for all Blazor components wanting to
    be notified of re instantiations of their given TextEditorKey's TextEditorBase
    [X]When the TextEditorView subscribes to the re instantiation of its target TextEditorBase
        there needs to be another state involved that tracks any components
        that are 'viewing' a TextEditorBase.
        [X]This way the cursors can update any Footer that is viewing the same TextEditorBase
            with the updated cursor position when the cursor moves.
}

# Plan
{
}

# Youtube thumbnail ideas
{
}

# Youtube title ideas
{
}

# Youtube video description
{
Email Me:
    -hunterfreemandev@gmail.com

Text Editor from scratch with Blazor and C# youtube playlist:
    -https://youtube.com/playlist?list=PLG4PTDe2qc0i0COivTxn_rjSN96Xq-_K1

GitHub repos
    -BlazorStudio: https://github.com/huntercfreeman/BlazorStudio
    -Blazor.Text.Editor: https://github.com/huntercfreeman/Blazor.Text.Editor
    -Blazor.Text.Editor-Template: https://github.com/huntercfreeman/Blazor.Text.Editor-Template
    -Blazor.Text.Editor.Analysis: https://github.com/huntercfreeman/Blazor.Text.Editor.Analysis
    -BlazorTreeView: https://github.com/huntercfreeman/BlazorTreeView

NuGet Packages
    -Blazor.Text.Editor: https://www.nuget.org/packages/Blazor.Text.Editor/
    -Blazor.Text.Editor.Lexer.HTML: https://www.nuget.org/packages/Blazor.Text.Editor.Lexer.HTML
    -Blazor.Text.Editor.Lexer.CSharp: https://www.nuget.org/packages/Blazor.Text.Editor.Lexer.CSharp
}

# Before this video specifically checklist
{
[]See in general checklist
}

# Checklist before recording a video in general
{
[]Font-size
    []Rider
        []Appearance
            []Font-Family: Segoe UI;
		    []Font-Size: 24px;
        []Editor
            []Font-Family: Consolas;
		    []Font-Size: 30px;
		    []Line Height: 1.1;
    []Operating system
        []Windows
            []Settings > Accessibility > Text size
                []Text size slider
                    []150%
    []Web Browser
    []BlazorStudio itself
    []Visual Studio Code
}

# Web Links
{
}