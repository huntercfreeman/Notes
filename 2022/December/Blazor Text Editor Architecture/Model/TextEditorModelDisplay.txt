// TextEditorModelDisplay : Blazor Component

@razorMarkup
{
    <div class="bte_text-editor-model">

    </div>
}

@cSharpCode
{
    INHERITS: FluxorComponent

    [Inject]
    private IStateSelection<TextEditorModelCollection?> TextEditorModelSelection { get; set; } = null!;
    [Inject]
    private IDispatcher Dispatcher { get; set; } = null!;

    /// <summary>
    /// If the provided <see cref="TextEditorModelKey"/> is registered using the
    /// <see cref="ITextEditorService"/>. Then this component will automatically update
    /// when the corresponding <see cref="TextEditorModel"/> is replaced.
    /// <br/><br/>
    /// A <see cref="TextEditorModelKey"/> which is NOT registered using the
    /// <see cref="ITextEditorService"/> can be passed in. Then if the <see cref="TextEditorModelKey"/>
    /// ever gets registered then this Blazor Component will update accordingly.
    /// </summary>
    [Parameter, EditorRequired]
    public TextEditorModelKey TextEditorModelKey { get; set; } = null!;

    protected override void OnInitialized()
    {
        TextEditorModelSelection.Select(textEditorModelCollection =>
        {
            _ = textEditorModelCollection.TryGetValue(
                    TextEditorModelKey, 
                    out var textEditorModel);

            return textEditorModel;
        });

        base.OnInitialized();
    }
}