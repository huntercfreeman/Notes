// TextEditorViewDisplay : Blazor Component

@razorMarkup
{
    <div class="bte_text-editor-view">

    </div>
}

@cSharpCode
{
    INHERITS: FluxorComponent

    [Inject]
    private IStateSelection<TextEditorViewCollection?> TextEditorViewSelection { get; set; } = null!;
    [Inject]
    private IDispatcher Dispatcher { get; set; } = null!;

    /// <summary>
    /// If the provided <see cref="TextEditorViewKey"/> is registered using the
    /// <see cref="TextEditorService"/>. Then this component will automatically update
    /// when the corresponding <see cref="TextEditorView"/> is replaced.
    /// <br/><br/>
    /// A <see cref="TextEditorViewKey"/> which is NOT registered using the
    /// <see cref="TextEditorService"/> can be passed in. Then if the <see cref="TextEditorViewKey"/>
    /// ever gets registered then this Blazor Component will update accordingly.
    /// </summary>
    [Parameter, EditorRequired]
    public TextEditorViewKey TextEditorViewKey { get; set; } = null!;

    protected override void OnInitialized()
    {
        TextEditorViewSelection.Select(textEditorViewCollection =>
        {
            _ = textEditorViewCollection.TryGetValue(
                    TextEditorViewKey, 
                    out var textEditorView);

            return textEditorView;
        });

        base.OnInitialized();
    }
}