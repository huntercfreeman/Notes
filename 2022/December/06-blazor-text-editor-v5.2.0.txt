DATE: 2022-12-06
----------------

# Goal
{

[]Razor needs better ILexer implementation as 
    []@code{...}
    []@code
      {

      }
    []Previous two @code examples must be syntaxed highlighted
        properly.
        []Currently only the
            []@code{...}
                []Is syntax highlighted properly
[]Added in Svelte ILexer to work on alongside Razor ILexer.
    Helps with InjectedLanguageDefinition.cs figuring out what
    is needed.

[]The TextEditorDisplay scrollbar should listen for mousemove
    events in the viewport instead of the current functionality.
    []The current functionality is to listen for mousemove events
        within the rendered scrollbar html element.
        []This feels very awkward to use currently so
            using mousemove on viewport and displacing the
            scrollbar based on a position diff between 
            current and previous events instead of taking
            mouse position at time of event will
            feel much more natural.
[]When out of view of the first line and deleting all the Text
    one finds themselves NOT having the first line scrolled
    into view. This is erroneous and needs fixed.

}

# Plan
{

[]Regarding .razor file parsing
    []An ILexer should be composable from other
        ILexer implementations
        []Then the ILexer which is a composition of others
            would only have parsing logic to determine
            which ILexer it is composed of gets control.
            []Once an inner ILexer gets control the idea
                is that the inner ILexer performs its
                operation and then returns back to the
                parent ILexer which has the main while() 
                loop.
                []This then gives the other inner ILexer
                    implementations a chance to take control.
    []Examples of ILexers made by composition of inner ILexers (two
        examples are used as to not have an overly narrow understanding
        of mixing HTML and an injected language):
        []RazorLexer.cs 
        // find answer to this question: is .cshtml exactly the same in regards to lexing - just different file extension?
        // Reading this to see what it says about razor: https://learn.microsoft.com/en-us/aspnet/web-pages/overview/getting-started/introducing-razor-syntax-c
        // regarding ^ make notes while reading below
        // Visual Basic is supported in razor see: https://learn.microsoft.com/en-us/aspnet/web-pages/overview/getting-started/introducing-razor-syntax-vb
            []Inner ILexer(s)
                []HtmlLexer.cs
                []CSharpLexer.cs
            []Conditions to give an inner ILexer control
                []'@' is the indicator that what follows is
                    a C# injected language fragment.
            []Comment syntaxes
                []Multi Line Razor Comment:
                    []Start: '@*'
                    []End: '*@'
                []Multi Line Html Comment:
                    []Start: '<!--'
                    []End: '-->'
        []SvelteLexer.css
            []Inner ILexer(s)
                []User chooses between
                    []JavaScriptLexer.cs
                    []TypeScriptLexer.cs
                []HtmlLexer.cs
                []CssLexer.cs
            []Conditions to give an inner ILexer control
                []<script> tag
                    []<script lang="ts">
                        []TypeScriptLexer.cs
                    []<script>
                        []JavaScriptLexer.cs
                []Top level text is treated as HTML if not a
                    matching tag which specifies a specific ILexer
                    []HtmlLexer.cs
                        []The '{' and '}' characters deliminate swapping
                            to the corresponding ILexer which is chosen
                            in the user's <script> tag. The default
                            ILexer is JavaScriptLexer.
                []<style> tag
                    []CssLexer.cs
            []Comment syntaxes
                []Multi Line Html Comment:
                    []Start: '<!--'
                    []End: '-->'
    []Introduction to ASP.NET Web Programming Using the Razor Syntax (C#)
      https://learn.microsoft.com/en-us/aspnet/web-pages/overview/getting-started/introducing-razor-syntax-c
        []The '@' character starts:
            []inline expressions
            []single statement blocks
            []multi-statement blocks
            []NOTE: in C# the '@' character
                is used to mark verbatim string literals.
        []Code blocks
            []Semicolon foreach statement
        []Inline expressions do NOT end with a semicolon
        []Http Globally Available Objects
            []Request
            []IsPost
            []... others?
        []Code blocks can contain tag elements
            []When you don't want to render an HTML element
                []Code blocks can contain a <text> element
                    []Multiple lines
                []Code blocks can contain @: operator
                    []Single line
        []Razor comments are removed and not shown
            in the page source
        []C# comments within a code block are 
            removed and not shown in the page source
        []HTML comments ARE rendered to the page and
            the user can see them by viewing the
            page source.
        []Conditions/Loops
            []if
                []else if
                []else
            []switch
            []for
            []foreach
            []while
    []Razor syntax reference for ASP.NET Core
      https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-7.0
        []Oh my goodness yes I found the reserved words for razor
            []https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-7.0#razor-reserved-keywords

    []Need to find any HTML that is within a razor code block.
        []Use HtmlLexer.cs on that HTML
            []Use CSharpLexer.cs on the part of the razor code block that remains otherwise.
    []The '@' character is used to transition from HTML to C#
        []Escape by using a second '@' character.
        []If a razor keyword immediately follows the '@' then
            Razor specific Markup
            []Example: "@if (true) { ... }"

    []Running into an issue with syntax highlighting the razor code blocks
        []The issue is: a code block in a sense
            has immediate child syntax nodes of both HTML and C#
            []@for (int i = 0; i < 10; i++)
              {
                @: The value @i&nbsp;

                if (i % 2 == 0)
                {
                    <text>
                        is even
                    </text>
                }
                else
                {
                    <text>
                        is odd
                    </text>
                }

                <br/>
              }
                []Need to write code to discern whether a HTML tag is found
                    []If so then invoke the HtmlLexer.cs just as was done when
                        first invoking Lex on the Razor file itself
                        []Any inner code blocks would go on to be handled as
                            this is a recursive call which uses the same logic
                            as was used to parse the main razor file
                            []Each HTML tag within a razor code block is in a sense
                                its own separate Html Document root.
                []Also must discern when something isn't HTML but C#
                    []When finding C# one must then find the end of that C# text
                        []If '@code{}' or '@functions{}' then wrap the found C#
                            text in a temporary class definition as to have
                            Roslyn syntax highlight methods and other various details
                            that require a class wrapping.
                            []Track the offset within the Razor files overall text
                                and convert Roslyn's syntax highlighting results
                                to have the correct starting and ending position index
                                by using the saved offset before using Roslyn.
                                []Also just as with the saved offset one must
                                    account for the amount of characters that start the
                                    adhoc class definition wrapping.
                [](??? I am unsure on this point) Also must discern when something isn't C# but razor like '<text></text>'
                    or '@:'
                
        
}

# Youtube thumbnail ideas
{

}

# Youtube title ideas
{

}

# Youtube video description
{

Previous Video which goes over this same topic but with pseudo code:
    -https://youtu.be/KEakxOFEMkk

Email Me:
    -hunterfreemandev@gmail.com

GitHub repos
    -BlazorStudio: https://github.com/huntercfreeman/BlazorStudio
    -Blazor.Text.Editor: https://github.com/huntercfreeman/Blazor.Text.Editor
    -Notes: https://github.com/huntercfreeman/Notes

Demo Website (Runs WebAssembly so clear your cache if you see an old version)
    -https://hunter-freeman-dev.azurewebsites.net/

NuGet Packages
    -Blazor.Text.Editor: https://www.nuget.org/packages/Blazor.Text.Editor/

Text Editor from scratch with Blazor and C# youtube playlist:
    -https://youtube.com/playlist?list=PLG4PTDe2qc0i0COivTxn_rjSN96Xq-_K1

}

# Checklist before recording a video in general
{

[]Font-size
    []Rider
        []Appearance
            []Font-Family: Segoe UI;
		    []Font-Size: 24px;
        []Editor
            []Font-Family: Consolas;
		    []Font-Size: 32px;
		    []Line Height: 1.1;
    []Operating system
        []Windows
            []Settings > Accessibility > Text size
                []Text size slider
                    []200%
    []Web Browser
        []110%
    []BlazorStudio itself
    []Visual Studio Code
        []14 font size

}