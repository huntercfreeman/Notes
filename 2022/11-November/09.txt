DATE: 2022-11-09
----------------

# Goal
{
## High priority
{
[]BlazorTreeView library needs to accept
    as a parameter various "state change event callbacks".
    []Should these "state change event callbacks" be
        asynchronous?
        []Func<TreeViewStateChangeEvent, Task>
    []What "state change event callbacks" should be
        provided?
        []With Fluxor one can use IStateSelection<FeatureState, TSubstate>
            FeatureStateSelection
            []Then in override OnInitialized one can
                FeatureStateSelection.Select(x => x[Key]) to get a specific
                TSubstate of a FeatureState.
                []In specific what I am referring to the issue that
                    currently the TreeViewService abstraction does not
                    have similar functionality.
                    []It would be useful if one could use the TreeViewService
                        and subscribe to changes to a specific TreeView
                        as opposed to any TreeView changing.
[]BlazorTreeView library needs to accept
    as a parameter various "mouse event callbacks".
    []Should these "mouse event callbacks" be
        asynchronous?
        []Func<TreeViewMouseEvent, Task>
    []Should these "mouse event callbacks" be encapsulated
        in a single object data type?
        []In otherwords instead of passing a Blazor parameter
            foreach mouse event would it be better to
            have a data type named, 'TreeViewMouseEventRegistrar'
            with a set only property foreach mouse event.
            []This would result in only having to pass in
            one Blazor parameter.
    []What "mouse event callbacks" should be
        provided?
        []OnClick
        []OnDoubleClick
        []OnMouseDown
}

## Medium priority
{
[]Add to the SolutionExplorerDisplay ITreeViewKeymap the following keybinds.
    []{ 'Space' } -> // Peek File Command
        []If file is already opened in the EditorDisplay then set its
            tab as the Active Tab.
        []Else if the file is NOT opened, then open it in a wellknown tab named
            the 'Peek Tab' within the EditorDisplay then set its
            tab as the Active Tab.
            []Only one file can be in the 'Peek Tab' and setting a new 'Peek Tab' target
                is to remove any currently peeked file from the peek tab.
            []The moment the user makes an edit to a file in the 'Peek Tab' that file
                is to be opened using the "Open File Command"
                []The 'Peek Tab' immediately after this would thereby be empty
                    and not display.
    []{ 'Enter' } -> // Open File Command
        []If file is already opened in the EditorDisplay then set its
            tab as the Active Tab.
        []Else if the file is NOT opened, then open it in the EditorDisplay then set its
            tab as the Active Tab.
        []FINALLY: set the user's focus to the TextEditor.
}

## Low priority
{
[]The SolutionExplorerDisplay Blazor component
    makes use of both a ContextMenu and an ITreeViewKeymap
    []The ContextMenu and ITreeViewKeymap have a large amount
        of duplicated code. This should be remedied.
        []Consider the idea that the BlazorTextEditor
            has ITextEditorCommandParameter and
            BlazorTreeView has ITreeViewCommandParameter.
            []Can these types inherit a common interface
                of 'ICommand' and all command logic
                be centralized in one location?
[]It would be useful if one could use the TextEditorService
    and subscribe to changes to a specific TextEditor
    as opposed to any TextEditor changing.
}
}

# Plan
{

}